#lang pl


#|
FLANG ::= <num> 1
         | { + <FLANG> <FLANG> } 2
         | { - <FLANG> <FLANG> } 3
         | { * <FLANG> <FLANG> } 4
         | { / <FLANG> <FLANG> } 5
         | { > <FLANG> <FLANG> } 6
         | { < <FLANG> <FLANG> } 7
         | { = <FLANG> <FLANG> } 8
         | <True> 9
         | <False> 10
         | { if { <FLANG> <FLANG> } <FLANG> } 11
         | { with { <id> <FLANG> } <FLANG> }  12
         | <id>  13
         | { fun { <id> } <FLANG> }  14
         | { call <FLANG> <FLANG> }  15

|#


(define-type FLANG
[ Num Number ]
[ Add FLANG FLANG ]
[ Sub FLANG FLANG ]
[ Mul FLANG FLANG ]
[ Div FLANG FLANG ]
[ Id Symbol ]
[ Bool Boolean]
[ Eq FLANG FLANG]
[ Gt FLANG FLANG]
[ Lt FLANG FLANG ]
[ If FLANG FLANG FLANG]
[ with Symbol FLANG FLAN ]
[ fun Symbol FLANG ]
[ call FLANG ])

(: parse-sexpr : Sexpr -> FLANG)
;; to convert s-expressions into FLANGs
(define (parse-sexpr sexpr)
(match sexpr
[(number: n) (Num n)]
[(symbol: name) (Id name)]
['True (Bool #t)]
['False (Bool #f)]
[(cons 'if more)
(match sexpr
[(list 'if cond 'then t-do 'else e-do)
(If (parse-sexpr cond) (parse-sexpr t-do) (parse-sexpr e-do))]
[else (error 'parse-sexpr "bad `if' syntax in ~s" sexpr)])]
[(cons 'with more)
(match sexpr
[(list 'with (list (symbol: name) named) body)
(with name (parse-sexpr named) (parse-sexpr body))]
[else (error 'parse-sexpr "bad `with' syntax in ~s" sexpr)])]
[(cons 'fun more)
(match sexpr
[(list 'fun (list (symbol: name)) body)
(fun name (parse-sexpr body))]
[else (error 'parse-sexpr "bad `fun' syntax in ~s" sexpr)])]
[(list '+ l r) (Add (parse-sexpr l) (parse-sexpr r))]
[(list '- l r) (Sub (parse-sexpr l) (parse-sexpr r))]
[(list '* l r) (Mul (parse-sexpr l) (parse-sexpr r))]
[(list '/ l r) (Div (parse-sexpr l) (parse-sexpr r))]
[(list '> lhs rhs) (Lt (parse-sexpr lhs) (parse-sexpr rhs))]
[(list '< lhs rhs) (Lt (parse-sexpr lhs) (parse-sexpr rhs))]
[(list '= lhs rhs) (Eq (parse-sexpr lhs) (parse-sexpr rhs))]
[(list 'call fun arg) (call (parse-sexpr fun) (parse-sexpr arg))]
[else (error 'parse-sexpr "bad syntax in ~s" sexpr)]))


(: parse : String -> FLANG)
;; parses a string containing a FLANG expression to a FLANG AST
(define (parse str)
(parse-sexpr (string->sexpr str)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



  
;; tests
(test (run "True") => true)
(test (run "{not True}") => false)
(test (run "{> 3 44}") => false)
(test (run "{if {- 3 3} {then-do 4} {else-do 5}}") => 4)
(test (run "{with {x 8}
 {if {> x 0} {then-do {/ 2 x}} {else-do x}}}") => 1/4)
(test (run "{with {x 0}
 {if {> x 0} {then-do {/ 2 x}} {else-do x}}}") => 0)
(test (run "{if {> 2 1} {then-do True} {else-do {+ 2 2}}}") => true)
(test (run "{with {c True}
 {if c {then-do {> 2 1}} {else-do 2}}}")
 => true)
(test (run "{with {foo {fun {x}
 {if {< x 2} {then-do x} {else-do {/ x 2}}}}} foo}")
 => (Fun 'x (If (Smaller (Id 'x) (Num 2)) (Id 'x) (Div (Id 'x) (Num 2)))))
(test (run "{with {x 0}
 {if {> x 0} {/ 2 x} x}}")
 =error> "parse-sexpr: bad `if' syntax in (if (> x 0) (/ 2 x) x)")
 (test (run "true") =error> "eval: free identifier: true")
(test (run "{< false 5}") =error> "eval: free identifier: false")
(test (run "{< False 5}")
 =error> "Num->number: expected a number, got: #(struct:Bool #f)")
